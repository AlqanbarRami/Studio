// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviesApi.Persistence;

#nullable disable

namespace MoviesApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220212093613_install")]
    partial class install
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MoviesApi.Domain.Models.Film", b =>
                {
                    b.Property<int>("FilmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FilmId"), 1L, 1);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FilmId");

                    b.ToTable("Films");

                    b.HasData(
                        new
                        {
                            FilmId = 1,
                            Country = "France",
                            Director = "Jean-Paul Salomé",
                            Name = "Mama Weed",
                            ReleaseDate = "2020"
                        },
                        new
                        {
                            FilmId = 2,
                            Country = "Sweden",
                            Director = "Lars Dimming, Bo Harringer",
                            Name = "Den siste cafépianisten",
                            ReleaseDate = "2012"
                        },
                        new
                        {
                            FilmId = 3,
                            Country = "USA",
                            Director = "Joel Coen",
                            Name = "The Tragedy of Macbeth",
                            ReleaseDate = "2021"
                        },
                        new
                        {
                            FilmId = 4,
                            Country = "Sweden",
                            Director = "Jesper Klevenås",
                            Name = "Shop",
                            ReleaseDate = "2020"
                        },
                        new
                        {
                            FilmId = 5,
                            Country = "Malta",
                            Director = "Alex Camilleri",
                            Name = "Luzzu",
                            ReleaseDate = "2021"
                        });
                });

            modelBuilder.Entity("MoviesApi.Domain.Models.FilmCopy", b =>
                {
                    b.Property<int>("FilmCopyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FilmCopyId"), 1L, 1);

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int?>("FilmStudioId")
                        .HasColumnType("int");

                    b.Property<bool>("RentedOut")
                        .HasColumnType("bit");

                    b.Property<int>("StudioId")
                        .HasColumnType("int");

                    b.HasKey("FilmCopyId");

                    b.HasIndex("FilmId");

                    b.HasIndex("FilmStudioId");

                    b.ToTable("FilmCopies");

                    b.HasData(
                        new
                        {
                            FilmCopyId = 1,
                            FilmId = 1,
                            RentedOut = false,
                            StudioId = 0
                        },
                        new
                        {
                            FilmCopyId = 2,
                            FilmId = 1,
                            RentedOut = false,
                            StudioId = 0
                        },
                        new
                        {
                            FilmCopyId = 3,
                            FilmId = 2,
                            RentedOut = false,
                            StudioId = 0
                        },
                        new
                        {
                            FilmCopyId = 4,
                            FilmId = 2,
                            RentedOut = false,
                            StudioId = 0
                        },
                        new
                        {
                            FilmCopyId = 5,
                            FilmId = 3,
                            RentedOut = false,
                            StudioId = 0
                        },
                        new
                        {
                            FilmCopyId = 6,
                            FilmId = 4,
                            RentedOut = false,
                            StudioId = 0
                        },
                        new
                        {
                            FilmCopyId = 7,
                            FilmId = 4,
                            RentedOut = false,
                            StudioId = 0
                        },
                        new
                        {
                            FilmCopyId = 8,
                            FilmId = 5,
                            RentedOut = false,
                            StudioId = 0
                        });
                });

            modelBuilder.Entity("MoviesApi.Domain.Models.FilmStudio", b =>
                {
                    b.Property<int>("FilmStudioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FilmStudioId"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FilmStudioId");

                    b.ToTable("FilmStudios");

                    b.HasData(
                        new
                        {
                            FilmStudioId = 1,
                            City = "Holllywood",
                            Name = "MGM"
                        },
                        new
                        {
                            FilmStudioId = 2,
                            City = "Hollywood",
                            Name = "News Corporation"
                        });
                });

            modelBuilder.Entity("MoviesApi.Domain.Models.User.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FilmStudioId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FilmStudioId1")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FilmStudioId1");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "ea2672ef-f25d-4d4f-bf75-68472d3aa960",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c870bc6-8ef7-44b6-b2e4-c7242197cd94",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Password = "Admin123!",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ/6JqVa3Px/lZ763YVh50WIVwrTMpCTcYlzo5EP6WdYUY1U+sLdjhagTy0WyMoz9w==",
                            PhoneNumberConfirmed = false,
                            Role = "admin",
                            SecurityStamp = "89991584-9627-4a3b-b45b-35cecc875532",
                            TwoFactorEnabled = false,
                            UserId = 1,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "185790a0-c48f-4900-b7e4-d1f9d5e3f6da",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cab12eaf-257a-468a-aaf5-9d9e832d93a4",
                            EmailConfirmed = false,
                            FilmStudioId = "1",
                            LockoutEnabled = false,
                            Password = "Studio123!",
                            PasswordHash = "AQAAAAEAACcQAAAAEJubvSWy/Dao/lZXXi5nCbG1fksuBUKgNGBD+8UAnUK4T/RkuB+w1NgVCqPmdYkawg==",
                            PhoneNumberConfirmed = false,
                            Role = "filmstudio",
                            SecurityStamp = "153d02f3-8645-4396-9087-7063881b5113",
                            TwoFactorEnabled = false,
                            UserId = 0,
                            UserName = "Studio"
                        });
                });

            modelBuilder.Entity("MoviesApi.Domain.Models.FilmCopy", b =>
                {
                    b.HasOne("MoviesApi.Domain.Models.Film", null)
                        .WithMany("FilmCopies")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesApi.Domain.Models.FilmStudio", null)
                        .WithMany("RentedFilmCopies")
                        .HasForeignKey("FilmStudioId");
                });

            modelBuilder.Entity("MoviesApi.Domain.Models.User.User", b =>
                {
                    b.HasOne("MoviesApi.Domain.Models.FilmStudio", "FilmStudio")
                        .WithMany()
                        .HasForeignKey("FilmStudioId1");

                    b.Navigation("FilmStudio");
                });

            modelBuilder.Entity("MoviesApi.Domain.Models.Film", b =>
                {
                    b.Navigation("FilmCopies");
                });

            modelBuilder.Entity("MoviesApi.Domain.Models.FilmStudio", b =>
                {
                    b.Navigation("RentedFilmCopies");
                });
#pragma warning restore 612, 618
        }
    }
}
